<?php

/**
 * @file
 * Contains linkback.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;

// User-agent used when extracting titles and excerpts.
define('LINKBACK_UA', 'Drupal Linkback (+http://drupal.org/project/linkback)');

// The local node could not be found.
define('LINKBACK_ERROR_LOCAL_NODE_NOT_FOUND', 1);

// The local node could not be used as a linkback resource (e.g., linkbacks are
// disabled on the node).
define('LINKBACK_ERROR_LOCAL_NODE_REFBACK_NOT_ALLOWED', 2);

// The linkback has previously been registered.
define('LINKBACK_ERROR_REFBACK_ALREADY_REGISTERED', 3);

// The linkback source does not contain the link to target.
define('LINKBACK_ERROR_REMOTE_URL_MISSING_LINK', 4);

/**
 * Implements hook_help().
 */
function linkback_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the linkback module.
    case 'help.page.linkback':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('linkback raw functionality') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function linkback_entity_insert(EntityInterface $entity) {

  // TODO allow other entities to use linkbacks.
  if ($entity->getEntityTypeId() != 'node') {
    return;
  }

  if (!(bool) $entity->get('status')) {
    return;
  }
  /** @var QueueFactory $queue_factory */
  $queue_factory = \Drupal::service('queue');
  /** @var QueueInterface $queue */
  $queue = $queue_factory->get(\Drupal::config('linkback.settings')->get('use_cron_send') ? 'cron_linkback_sender' : 'manual_linkback_sender');
  $item = new \stdClass();
  $item->nid = $entity->id();
  $queue->createItem($entity);

}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function linkback_entity_update(EntityInterface $entity) {
  linkback_entity_insert($entity);
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function linkback_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Field\FieldConfigInterface $field */
  $field = $form_state->getFormObject()->getEntity();
  $allowed_types = [
    'string',
    'string_long',
    'text',
    'text_long',
    'text_with_summary',
    'link',
  ];

  if (in_array($field->getType(), $allowed_types)) {
    $form['third_party_settings']['linkback'] = [
      '#type' => 'fieldset',
      '#title' => t('Linkback mappings'),
    ];
    $form['third_party_settings']['linkback']['mf2_mapping'] = [
      '#type' => 'textfield',
      '#title' => t('Mapped microformat property'),
      '#placeholder' => 'author/thumbnail',
      '#default_value' => $field->getThirdPartySetting('linkback', 'mf2_mapping'),
      '#description' => t('If the key defined is in the parsed metainfo json object,
      the pointed value will be defined in this field when processing linkback.The property
      must be separated by "/" if any depth is needed.'),
    ];
    $form['third_party_settings']['linkback']['rdf_mapping'] = [
      '#type' => 'textfield',
      '#title' => t('Mapped RDF property'),
      '#placeholder' => 'author/thumbnail',
      '#default_value' => $field->getThirdPartySetting('linkback', 'rdf_mapping'),
      '#description' => t('If the key defined is in the parsed metainfo json object,
      the pointed value will be defined in this field when processing linkback.The property
      must be separated by "/" if any depth is needed.'),
    ];

  }
}
